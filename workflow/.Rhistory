input=step12.organ.bias$input,
params=step12.organ.bias$params[[p]],
output_file=file.path(
"..", step12.organ.bias$output.dir,
paste(step12.organ.bias$params[[p]]$species, ".html", sep="")))
} else {
rmarkdown::render(
input=step12.organ.bias$input,
params=step12.organ.bias$params[[p]],
output_file=file.path(
"..", step12.organ.bias$output.dir,
paste(step12.organ.bias$params[[p]]$species,
paste0("rnd", step12.organ.bias$params[[p]]$seed.run, ".html"), sep="_")))
}
} else {
if (step12.organ.bias$params[[p]]$randomized.mean.expr==FALSE) {
rmarkdown::render(
input=step12.organ.bias$input,
params=step12.organ.bias$params[[p]],
output_file=file.path(
"..", step12.organ.bias$output.dir,
paste(step12.organ.bias$params[[p]]$species, "nonzero.html", sep="_")))
} else {
rmarkdown::render(
input=step12.organ.bias$input,
params=step12.organ.bias$params[[p]],
output_file=file.path(
"..", step12.organ.bias$output.dir,
paste(step12.organ.bias$params[[p]]$species, "nonzero",
paste0("rnd", step12.organ.bias$params[[p]]$seed.run, ".html"), sep="_")))
}
}
}
# Clear workspace
keep <- ls()[grepl("step[0-9]*",ls())]
rm(list=setdiff(ls(), keep))
gc()
renv::status()
renv::snapshot()
renv::status()
step13.organ.bias.combined <- list()
step13.organ.bias.combined$input <- "analysis/13_Organ_Bias_Combined.Rmd"
step13.organ.bias.combined$output.dir <- "../results/13_Organ_Bias_Combined"
# Create results directory
if (!dir.exists(step13.organ.bias.combined$output.dir)) {
dir.create(step13.organ.bias.combined$output.dir, recursive=TRUE)
}
# List parameters
step13.organ.bias.combined$params <- list(
list(all.nonzero.matrix=FALSE, randomized.mean.expr=FALSE),
list(all.nonzero.matrix=TRUE, randomized.mean.expr=FALSE),
list(all.nonzero.matrix=FALSE, randomized.mean.expr=TRUE, seed.run=12345),
list(all.nonzero.matrix=FALSE, randomized.mean.expr=TRUE, seed.run=67890)
)
##### Run analysis script #####
for (p in (1:length(step13.organ.bias.combined$params))) {
if (step13.organ.bias.combined$params[[p]]$all.nonzero.matrix==FALSE) {
if (step13.organ.bias.combined$params[[p]]$randomized.mean.expr==FALSE) {
rmarkdown::render(
input=step13.organ.bias.combined$input,
params=step13.organ.bias.combined$params[[p]],
output_file=file.path(
"..", step13.organ.bias.combined$output.dir,
paste("LOC_ELU_DRE", ".html", sep="")))
} else {
rmarkdown::render(
input=step13.organ.bias.combined$input,
params=step13.organ.bias.combined$params[[p]],
output_file=file.path(
"..", step13.organ.bias.combined$output.dir,
paste("LOC_ELU_DRE",
paste0("rnd", step13.organ.bias.combined$params[[p]]$seed.run, ".html"), sep="_")))
}
} else {
if (step13.organ.bias.combined$params[[p]]$randomized.mean.expr==FALSE) {
rmarkdown::render(
input=step13.organ.bias.combined$input,
params=step13.organ.bias.combined$params[[p]],
output_file=file.path(
"..", step13.organ.bias.combined$output.dir,
paste("LOC_ELU_DRE", "nonzero.html", sep="_")))
} else {
rmarkdown::render(
input=step13.organ.bias.combined$input,
params=step13.organ.bias.combined$params[[p]],
output_file=file.path(
"..", step13.organ.bias.combined$output.dir,
paste("LOC_ELU_DRE", "nonzero",
paste0("rnd", step13.organ.bias.combined$params[[p]]$seed.run, ".html"), sep="_")))
}
}
}
# Clear workspace
keep <- ls()[grepl("step[0-9]*",ls())]
rm(list=setdiff(ls(), keep))
gc()
#### Step 14: Combine results from step 8 for observed and randomized data ####
##### Set input and parameters #####
step14.organ.bias.observed.vs.random <- list()
step14.organ.bias.observed.vs.random$input <- "analysis/14_Organ_Bias_Observed_vs_Random.Rmd"
step14.organ.bias.observed.vs.random$output.dir <- "../results/14_Organ_Bias_Observed_vs_Random"
# Create results directory
if (!dir.exists(step14.organ.bias.observed.vs.random$output.dir)) {
dir.create(step14.organ.bias.observed.vs.random$output.dir, recursive=TRUE)
}
# List parameters
step14.organ.bias.observed.vs.random$params <- list(
list(species="LOC", species.name="Lepisosteus oculatus", seed.run1=12345, seed.run2=67890, plot.height=16, plot.width=10),
list(species="ELU", species.name="Esox lucius", seed.run1=12345, seed.run2=67890, plot.height=18, plot.width=22),
list(species="DRE", species.name="Danio rerio", seed.run1=12345, seed.run2=67890, plot.height=18, plot.width=22)
)
##### Run analysis script #####
for (p in (1:length(step14.organ.bias.observed.vs.random$params))) {
print(paste("Species:", step14.organ.bias.observed.vs.random$params[[p]]$species))
rmarkdown::render(
input=step14.organ.bias.observed.vs.random$input,
params=step14.organ.bias.observed.vs.random$params[[p]],
output_file=file.path(
"..", step14.organ.bias.observed.vs.random$output.dir,
paste(step14.organ.bias.observed.vs.random$params[[p]]$species, ".html", sep="")))
}
# Clear workspace
rm(list=setdiff(ls(), ls()[grepl("step[0-9]*",ls())]))
gc()
species.name <- c("Lepisosteus oculatus","Esox lucius","Danio rerio")
names(species.name) <- c("LOC","ELU","DRE")
species.name
rm(list=setdiff(ls(), ls()[grepl("step[0-9]*|species.name",ls())]))
gc()
species.name["LOC"]
species.name[["LOC"]]
species.name[["ELU"]]
species.name[["DRE"]]
file.path("../results/", "run_pipeline.Rdata")
file.path("../results", "run_pipeline.Rdata")
save.image(file.path("../results", "run_pipeline.Rdata"))
species.name <- c("Lepisosteus oculatus","Esox lucius","Danio rerio")
names(species.name) <- c("LOC","ELU","DRE")
#### Step 1: Filter samples ####
##### Set input and parameters #####
step01.filter.samples <- list()
step01.filter.samples$input <- "analysis/01_Filter_Samples.Rmd"
step01.filter.samples$output.dir <- "../results/01_Filter_Samples"
# Create results directory
if (!dir.exists(step01.filter.samples$output.dir)) {
dir.create(step01.filter.samples$output.dir, recursive=TRUE)
}
# List parameters
## For expression variability analysis, we require a minimum of 4 replicates per condition
## For organ expression specificity analysis, we require 2 replicates for spotted gar and 1 replicate for zebrafish and northern pike
step01.filter.samples$params <- list(
list(species="LOC", species.name=species.name[["LOC"]], min.reads=0.2e6, min.replicates=4, min.cpm=1.0, normalize.by.condition=TRUE, set.scale=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], min.reads=0.3e6, min.replicates=4, min.cpm=1.0, normalize.by.condition=TRUE, set.scale=TRUE),
list(species="DRE", species.name=species.name[["DRE"]], min.genes=10000, min.reads=0.5e6, min.replicates=4, min.cpm=1.0, normalize.by.condition=TRUE, set.scale=TRUE),
list(species="LOC", species.name=species.name[["LOC"]], min.genes=6000, min.reads=0.2e6, min.replicates=2, min.cpm=1.0, normalize.by.condition=FALSE, set.scale=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], min.genes=10000, min.reads=0.3e6, min.replicates=1, min.cpm=1.0, normalize.by.condition=FALSE, set.scale=TRUE),
list(species="DRE", species.name=species.name[["DRE"]], min.genes=10000, min.reads=0.5e6, min.replicates=1, min.cpm=1.0, normalize.by.condition=FALSE, set.scale=TRUE)
)
##### Run analysis script #####
for (p in (1:length(step01.filter.samples$params))) {
print(paste("Species:", step01.filter.samples$params[[p]]$species))
print(paste("Minimum replicates:", step01.filter.samples$params[[p]]$min.replicates))
rmarkdown::render(
input=step01.filter.samples$input,
params=step01.filter.samples$params[[p]],
output_file=file.path(
"..", step01.filter.samples$output.dir,
paste(step01.filter.samples$params[[p]]$species, step01.filter.samples$params[[p]]$min.replicates, sep="_", "reps.html")))
}
# Clear workspace
rm(list=setdiff(ls(), ls()[grepl("step[0-9]*|species.name",ls())]))
gc()
#### Step 2: Estimate gene expression variability ####
##### Set input and parameters #####
step02.variability.jackknife <- list()
step02.variability.jackknife$input <- "analysis/02_Variability_Jackknife.Rmd"
step02.variability.jackknife$output.dir <- "../results/02_Variability_Jackknife"
# Create results directory
if (!dir.exists(step02.variability.jackknife$output.dir)) {
dir.create(step02.variability.jackknife$output.dir, recursive=TRUE)
}
# List parameters
step02.variability.jackknife$params <- list(
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=FALSE, run.example=TRUE, ex.tissue="brain", ex.sex="F"),
list(species="LOC", species.name=species.name[["LOC"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=FALSE, run.example=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=FALSE, run.example=FALSE),
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=FALSE, run.example=FALSE),
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=TRUE, run.example=TRUE, ex.tissue="brain", ex.sex="F"),
list(species="LOC", species.name=species.name[["LOC"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=TRUE, run.example=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=TRUE, run.example=FALSE),
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=TRUE, run.example=FALSE)
)
# If all.nonzero.matrix=TRUE, we consider only the set of genes with nonzero counts across all samples
# The last one is for an example computation without jackknife resampling
##### Run analysis script #####
for (p in (1:length(step02.variability.jackknife$params))) {
print(paste("Species:", step02.variability.jackknife$params[[p]]$species))
print(paste("Run jackknife?:", !step02.variability.jackknife$params[[p]]$run.example))
if (step02.variability.jackknife$params[[p]]$all.nonzero.matrix==FALSE) {
if (step02.variability.jackknife$params[[p]]$run.example==TRUE) {
rmarkdown::render(
input=step02.variability.jackknife$input,
params=step02.variability.jackknife$params[[p]],
output_file=file.path(
"..", step02.variability.jackknife$output.dir,
paste(step02.variability.jackknife$params[[p]]$species, "example.html", sep="_")))
} else {
rmarkdown::render(
input=step02.variability.jackknife$input,
params=step02.variability.jackknife$params[[p]],
output_file=file.path(
"..", step02.variability.jackknife$output.dir,
paste(step02.variability.jackknife$params[[p]]$species, ".html", sep="")))
}
} else {
if (step02.variability.jackknife$params[[p]]$run.example==TRUE) {
rmarkdown::render(
input=step02.variability.jackknife$input,
params=step02.variability.jackknife$params[[p]],
output_file=file.path(
"..", step02.variability.jackknife$output.dir,
paste(step02.variability.jackknife$params[[p]]$species, "nonzero", "example.html", sep="_")))
} else {
rmarkdown::render(
input=step02.variability.jackknife$input,
params=step02.variability.jackknife$params[[p]],
output_file=file.path(
"..", step02.variability.jackknife$output.dir,
paste(step02.variability.jackknife$params[[p]]$species, "nonzero.html", sep="_")))
}
}
}
# Clear workspace
keep <- ls()[grepl("step[0-9]*|species.name",ls())]
rm(list=setdiff(ls(), keep))
gc()
#### Step 3: Plot expression variability metrics ####
##### Set input and parameters #####
step03.variability.plots <- list()
step03.variability.plots$input <- "analysis/03_Variability_Plots.Rmd"
step03.variability.plots$output.dir <- "../results/03_Variability_Plots"
# Create results directory
if (!dir.exists(step03.variability.plots$output.dir)) {
dir.create(step03.variability.plots$output.dir, recursive=TRUE)
}
# List parameters
step03.variability.plots$params <- list(
list(species="LOC", species.name=species.name[["LOC"]], min.percentile=0.00, max.percentile=0.95, all.nonzero.matrix=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], min.percentile=0.00, max.percentile=0.95, all.nonzero.matrix=FALSE),
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, all.nonzero.matrix=FALSE),
list(species="LOC", species.name=species.name[["LOC"]], min.percentile=0.00, max.percentile=0.95, all.nonzero.matrix=TRUE),
list(species="ELU", species.name=species.name[["ELU"]], min.percentile=0.00, max.percentile=0.95, all.nonzero.matrix=TRUE),
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, all.nonzero.matrix=TRUE)
)
##### Run analysis script #####
for (p in (1:length(step03.variability.plots$params))) {
print(paste("Species:", step03.variability.plots$params[[p]]$species))
if (step03.variability.plots$params[[p]]$all.nonzero.matrix==FALSE) {
rmarkdown::render(
input=step03.variability.plots$input,
params=step03.variability.plots$params[[p]],
output_file=file.path(
"..", step03.variability.plots$output.dir,
paste(step03.variability.plots$params[[p]]$species, ".html", sep="")))
} else {
rmarkdown::render(
input=step03.variability.plots$input,
params=step03.variability.plots$params[[p]],
output_file=file.path(
"..", step03.variability.plots$output.dir,
paste(step03.variability.plots$params[[p]]$species, "nonzero.html", sep="_")))
}
}
# Clear workspace
keep <- ls()[grepl("step[0-9]*|species.name",ls())]
rm(list=setdiff(ls(), keep))
gc()
#### Step 4: Check for correlation across conditions ####
##### Set input and parameters #####
step04.correlation.conditions <- list()
step04.correlation.conditions$input <- "analysis/04_Correlation_Across_Conditions.Rmd"
step04.correlation.conditions$output.dir <- "../results/04_Correlation_Across_Conditions"
# Create results directory
if (!dir.exists(step04.correlation.conditions$output.dir)) {
dir.create(step04.correlation.conditions$output.dir, recursive=TRUE)
}
# List parameters
step04.correlation.conditions$params <- list(
list(species="LOC", species.name=species.name[["LOC"]], all.nonzero.matrix=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], all.nonzero.matrix=FALSE),
list(species="DRE", species.name=species.name[["DRE"]], all.nonzero.matrix=FALSE),
list(species="LOC", species.name=species.name[["LOC"]], all.nonzero.matrix=TRUE),
list(species="ELU", species.name=species.name[["ELU"]], all.nonzero.matrix=TRUE),
list(species="DRE", species.name=species.name[["DRE"]], all.nonzero.matrix=TRUE)
)
##### Run analysis script #####
for (p in (1:length(step04.correlation.conditions$params))) {
print(paste("Species:", step04.correlation.conditions$params[[p]]$species))
if (step04.correlation.conditions$params[[p]]$all.nonzero.matrix==FALSE) {
rmarkdown::render(
input=step04.correlation.conditions$input,
params=step04.correlation.conditions$params[[p]],
output_file=file.path(
"..", step04.correlation.conditions$output.dir,
paste(step04.correlation.conditions$params[[p]]$species, ".html", sep="")))
} else {
rmarkdown::render(
input=step04.correlation.conditions$input,
params=step04.correlation.conditions$params[[p]],
output_file=file.path(
"..", step04.correlation.conditions$output.dir,
paste(step04.correlation.conditions$params[[p]]$species, "nonzero.html", sep="_")))
}
}
# Clear workspace
keep <- ls()[grepl("step[0-9]*|species.name",ls())]
rm(list=setdiff(ls(), keep))
gc()
#### Step 5: Check for bimodality ####
##### Set input and parameters #####
step05.bimodality.test <- list()
step05.bimodality.test$input <- "analysis/05_Bimodality_Test.Rmd"
step05.bimodality.test$output.dir <- "../results/05_Bimodality_Test"
# Create results directory
if (!dir.exists(step05.bimodality.test$output.dir)) {
dir.create(step05.bimodality.test$output.dir, recursive=TRUE)
}
# List parameters
step05.bimodality.test$params <- list(
list(species="LOC", species.name=species.name[["LOC"]], min.replicates=10),
list(species="ELU", species.name=species.name[["ELU"]], min.replicates=10),
list(species="DRE", species.name=species.name[["DRE"]], min.replicates=10)
)
##### Run analysis script #####
for (p in (1:length(step05.bimodality.test$params))) {
print(paste("Species:", step05.bimodality.test$params[[p]]$species))
rmarkdown::render(
input=step05.bimodality.test$input,
params=step05.bimodality.test$params[[p]],
output_file=file.path(
"..", step05.bimodality.test$output.dir,
paste(step05.bimodality.test$params[[p]]$species, ".html", sep="")))
}
print(params)
# Install BimodalIndex
packages <- c("dplyr","tibble","matrixStats","BimodalIndex","ggplot2","ggpubr")
for (p in packages) {
if (!require(p, character.only=TRUE)) {
print(paste("Installing", p))
install.packages(p, character.only=TRUE)
renv::snapshot()
}
print(paste("Loading", p))
library(p, character.only=TRUE)
}
source("../functions/bimodality_test.R")
source("../functions/bimodality_test_plots.R")
sessionInfo()
# Load saved data from 01_Filter_Samples.Rmd
# Normalized within-condition
filtered.samples <- readRDS(
file.path(params$input.samples.rds.path,
paste(params$species, "4_reps_data.conditions.rds", sep="_")))
# Load processed expression variability estimates from 03_Variability_Plots.Rmd
jack.bind <- readRDS(
file.path(params$input.variability.rds.path,
paste(params$species, "jack.resid.cv.bind.rds", sep="_")))
keep <- ls()[grepl("step[0-9]*|species.name",ls())]
rm(list=setdiff(ls(), keep))
gc()
step05.bimodality.test <- list()
step05.bimodality.test$input <- "analysis/05_Bimodality_Test.Rmd"
step05.bimodality.test$output.dir <- "../results/05_Bimodality_Test"
# Create results directory
if (!dir.exists(step05.bimodality.test$output.dir)) {
dir.create(step05.bimodality.test$output.dir, recursive=TRUE)
}
# List parameters
step05.bimodality.test$params <- list(
list(species="LOC", species.name=species.name[["LOC"]], min.replicates=10),
list(species="ELU", species.name=species.name[["ELU"]], min.replicates=10),
list(species="DRE", species.name=species.name[["DRE"]], min.replicates=10)
)
##### Run analysis script #####
for (p in (1:length(step05.bimodality.test$params))) {
print(paste("Species:", step05.bimodality.test$params[[p]]$species))
rmarkdown::render(
input=step05.bimodality.test$input,
params=step05.bimodality.test$params[[p]],
output_file=file.path(
"..", step05.bimodality.test$output.dir,
paste(step05.bimodality.test$params[[p]]$species, ".html", sep="")))
}
View(filtered.samples.retained)
View(filtered.samples)
View(filtered.samples[["conditions"]])
View(filtered.samples)
View(filtered.samples[["conditions"]])
View(filtered.samples[["metadata"]])
# Load saved data from 01_Filter_Samples.Rmd
# Normalized within-condition
filtered.samples <- readRDS(
file.path(params$input.samples.rds.path,
paste(params$species, "4_reps_data.conditions.rds", sep="_")))
View(filtered.samples)
View(filtered.samples[["conditions"]])
# Load saved data from 01_Filter_Samples.Rmd
# Normalized within-condition
filtered.samples <- readRDS(
file.path(params$input.samples.rds.path,
paste(params$species, "4_reps_data.conditions.rds", sep="_")))
View(filtered.samples)
View(filtered.samples[["conditions"]])
View(filtered.samples[["metadata"]])
View(step01.filter.samples)
rm(list=setdiff(ls(), ls()[grepl("step[0-9]*|species.name",ls())]))
gc()
##### Set input and parameters #####
step01.filter.samples <- list()
step01.filter.samples$input <- "analysis/01_Filter_Samples.Rmd"
step01.filter.samples$output.dir <- "../results/01_Filter_Samples"
# Create results directory
if (!dir.exists(step01.filter.samples$output.dir)) {
dir.create(step01.filter.samples$output.dir, recursive=TRUE)
}
# List parameters
## For expression variability analysis, we require a minimum of 4 replicates per condition
## For organ expression specificity analysis, we require 2 replicates for spotted gar and 1 replicate for zebrafish and northern pike
step01.filter.samples$params <- list(
list(species="LOC", species.name=species.name[["LOC"]], min.genes=6000, min.reads=0.2e6, min.replicates=4, min.cpm=1.0, normalize.by.condition=TRUE, set.scale=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], min.genes=10000, min.reads=0.3e6, min.replicates=4, min.cpm=1.0, normalize.by.condition=TRUE, set.scale=TRUE),
list(species="DRE", species.name=species.name[["DRE"]], min.genes=10000, min.reads=0.5e6, min.replicates=4, min.cpm=1.0, normalize.by.condition=TRUE, set.scale=TRUE),
list(species="LOC", species.name=species.name[["LOC"]], min.genes=6000, min.reads=0.2e6, min.replicates=2, min.cpm=1.0, normalize.by.condition=FALSE, set.scale=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], min.genes=10000, min.reads=0.3e6, min.replicates=1, min.cpm=1.0, normalize.by.condition=FALSE, set.scale=TRUE),
list(species="DRE", species.name=species.name[["DRE"]], min.genes=10000, min.reads=0.5e6, min.replicates=1, min.cpm=1.0, normalize.by.condition=FALSE, set.scale=TRUE)
)
##### Run analysis script #####
for (p in (1:length(step01.filter.samples$params))) {
print(paste("Species:", step01.filter.samples$params[[p]]$species))
print(paste("Minimum replicates:", step01.filter.samples$params[[p]]$min.replicates))
rmarkdown::render(
input=step01.filter.samples$input,
params=step01.filter.samples$params[[p]],
output_file=file.path(
"..", step01.filter.samples$output.dir,
paste(step01.filter.samples$params[[p]]$species, step01.filter.samples$params[[p]]$min.replicates, sep="_", "reps.html")))
}
# Clear workspace
rm(list=setdiff(ls(), ls()[grepl("step[0-9]*|species.name",ls())]))
gc()
#### Step 2: Estimate gene expression variability ####
##### Set input and parameters #####
step02.variability.jackknife <- list()
step02.variability.jackknife$input <- "analysis/02_Variability_Jackknife.Rmd"
step02.variability.jackknife$output.dir <- "../results/02_Variability_Jackknife"
# Create results directory
if (!dir.exists(step02.variability.jackknife$output.dir)) {
dir.create(step02.variability.jackknife$output.dir, recursive=TRUE)
}
# List parameters
step02.variability.jackknife$params <- list(
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=FALSE, run.example=TRUE, ex.tissue="brain", ex.sex="F"),
list(species="LOC", species.name=species.name[["LOC"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=FALSE, run.example=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=FALSE, run.example=FALSE),
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=FALSE, run.example=FALSE),
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=TRUE, run.example=TRUE, ex.tissue="brain", ex.sex="F"),
list(species="LOC", species.name=species.name[["LOC"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=TRUE, run.example=FALSE),
list(species="ELU", species.name=species.name[["ELU"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=TRUE, run.example=FALSE),
list(species="DRE", species.name=species.name[["DRE"]], min.percentile=0.00, max.percentile=0.95, win.size=100, all.nonzero.matrix=TRUE, run.example=FALSE)
)
# If all.nonzero.matrix=TRUE, we consider only the set of genes with nonzero counts across all samples
# The last one is for an example computation without jackknife resampling
##### Run analysis script #####
for (p in (1:length(step02.variability.jackknife$params))) {
print(paste("Species:", step02.variability.jackknife$params[[p]]$species))
print(paste("Run jackknife?:", !step02.variability.jackknife$params[[p]]$run.example))
if (step02.variability.jackknife$params[[p]]$all.nonzero.matrix==FALSE) {
if (step02.variability.jackknife$params[[p]]$run.example==TRUE) {
rmarkdown::render(
input=step02.variability.jackknife$input,
params=step02.variability.jackknife$params[[p]],
output_file=file.path(
"..", step02.variability.jackknife$output.dir,
paste(step02.variability.jackknife$params[[p]]$species, "example.html", sep="_")))
} else {
rmarkdown::render(
input=step02.variability.jackknife$input,
params=step02.variability.jackknife$params[[p]],
output_file=file.path(
"..", step02.variability.jackknife$output.dir,
paste(step02.variability.jackknife$params[[p]]$species, ".html", sep="")))
}
} else {
if (step02.variability.jackknife$params[[p]]$run.example==TRUE) {
rmarkdown::render(
input=step02.variability.jackknife$input,
params=step02.variability.jackknife$params[[p]],
output_file=file.path(
"..", step02.variability.jackknife$output.dir,
paste(step02.variability.jackknife$params[[p]]$species, "nonzero", "example.html", sep="_")))
} else {
rmarkdown::render(
input=step02.variability.jackknife$input,
params=step02.variability.jackknife$params[[p]],
output_file=file.path(
"..", step02.variability.jackknife$output.dir,
paste(step02.variability.jackknife$params[[p]]$species, "nonzero.html", sep="_")))
}
}
}
rm(list=ls())
gc()
